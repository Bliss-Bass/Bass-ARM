From 91c3e73da51f6219f83adfb2fbbdfc04948730dd Mon Sep 17 00:00:00 2001
From: Chirayu Desai <chirayudesai1@gmail.com>
Date: Wed, 30 Jan 2019 18:18:10 +0530
Subject: [PATCH 2/4] Allow microG and only microG to spoof package signature

* Create a new privileged permission MICROG_SPOOF_SIGNATURE,
  which is required to spoof signature.
  This means it cannot be used by normal user apps.
* Add package name checks to allow only GmsCore and FakeStore
  to use this, since they're the only apps we want using this.
* Since both of those apps are system apps, package name checks
  are fine since no other app can pretend to be that package,
  it'd have to be signed the private keys used to sign those apps.
* Only allow them to spoof a hardcoded Google signature,
  since we do not want to allow spoofing of arbitrary signatures.

This patch originally started off from the upstream patches, but has been
significantly changed to heavily restrict the usage of this.

References:
* Upstream microG spoofing patches:
  https://github.com/microg/GmsCore/tree/master/patches
* ProtonAOSP Android 12 port:
  https://github.com/ProtonAOSP/android_frameworks_base/commit/0deff13d05e451fbe3803f66be73853237c6729c

Test: microG, open Self Check, verify output
Change-Id: I70af90eb808eaa892b2bad053350d502d84ca884
(cherry picked from commit bfeee22ba01b6fddb795c6c9b2d93565bb6a4965)
---
 core/res/AndroidManifest.xml                  |  5 +++
 .../com/android/server/pm/ComputerEngine.java | 45 ++++++++++++++++---
 2 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml
index 6a80d1cb62a7..c68a5b4f107d 100644
--- a/core/res/AndroidManifest.xml
+++ b/core/res/AndroidManifest.xml
@@ -3564,6 +3564,11 @@
         android:description="@string/permdesc_getPackageSize"
         android:protectionLevel="normal" />
 
+    <!-- @hide Allows an application to change the package signature as
+         seen by applications. Only allowed to be used by microG.-->
+    <permission android:name="android.permission.MICROG_SPOOF_SIGNATURE"
+        android:protectionLevel="signature|privileged" />
+
     <!-- @deprecated No longer useful, see
          {@link android.content.pm.PackageManager#addPackageToPreferred}
          for details. -->
diff --git a/services/core/java/com/android/server/pm/ComputerEngine.java b/services/core/java/com/android/server/pm/ComputerEngine.java
index 46b7460dff1b..44c8cb4dd742 100644
--- a/services/core/java/com/android/server/pm/ComputerEngine.java
+++ b/services/core/java/com/android/server/pm/ComputerEngine.java
@@ -410,6 +410,13 @@ public class ComputerEngine implements Computer {
     private final BackgroundDexOptService mBackgroundDexOptService;
     private final PackageManagerInternal.ExternalSourcesPolicy mExternalSourcesPolicy;
 
+    // The Google signature faked by microG.
+    private static final String MICROG_FAKE_SIGNATURE = "308204433082032ba003020102020900c2e08746644a308d300d06092a864886f70d01010405003074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f6964301e170d3038303832313233313333345a170d3336303130373233313333345a3074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f696430820120300d06092a864886f70d01010105000382010d00308201080282010100ab562e00d83ba208ae0a966f124e29da11f2ab56d08f58e2cca91303e9b754d372f640a71b1dcb130967624e4656a7776a92193db2e5bfb724a91e77188b0e6a47a43b33d9609b77183145ccdf7b2e586674c9e1565b1f4c6a5955bff251a63dabf9c55c27222252e875e4f8154a645f897168c0b1bfc612eabf785769bb34aa7984dc7e2ea2764cae8307d8c17154d7ee5f64a51a44a602c249054157dc02cd5f5c0e55fbef8519fbe327f0b1511692c5a06f19d18385f5c4dbc2d6b93f68cc2979c70e18ab93866b3bd5db8999552a0e3b4c99df58fb918bedc182ba35e003c1b4b10dd244a8ee24fffd333872ab5221985edab0fc0d0b145b6aa192858e79020103a381d93081d6301d0603551d0e04160414c77d8cc2211756259a7fd382df6be398e4d786a53081a60603551d2304819e30819b8014c77d8cc2211756259a7fd382df6be398e4d786a5a178a4763074310b3009060355040613025553311330110603550408130a43616c69666f726e6961311630140603550407130d4d6f756e7461696e205669657731143012060355040a130b476f6f676c6520496e632e3110300e060355040b1307416e64726f69643110300e06035504031307416e64726f6964820900c2e08746644a308d300c0603551d13040530030101ff300d06092a864886f70d010104050003820101006dd252ceef85302c360aaace939bcff2cca904bb5d7a1661f8ae46b2994204d0ff4a68c7ed1a531ec4595a623ce60763b167297a7ae35712c407f208f0cb109429124d7b106219c084ca3eb3f9ad5fb871ef92269a8be28bf16d44c8d9a08e6cb2f005bb3fe2cb96447e868e731076ad45b33f6009ea19c161e62641aa99271dfd5228c5c587875ddb7f452758d661f6cc0cccb7352e424cc4365c523532f7325137593c4ae341f4db41edda0d0b1071a7c440f0fe9ea01cb627ca674369d084bd2fd911ff06cdbf2cfa10dc0f893ae35762919048c7efc64c7144178342f70581c9de573af55b390dd7fdb9418631895d5f759f30112687ff621410c069308a";
+
+    // List of packages which require signature spoofing.
+    private static final String[] MICROG_FAKE_SIGNATURE_PACKAGES =
+            new String[] { "com.google.android.gms", "com.android.vending"};
+
     // PackageManagerService attributes that are primitives are referenced through the
     // pms object directly.  Primitives are the only attributes so referenced.
     protected final PackageManagerService mService;
@@ -1603,6 +1610,22 @@ public class ComputerEngine implements Computer {
         return result;
     }
 
+    private PackageInfo mayFakeSignature(AndroidPackage p, PackageInfo pi,
+            Set<String> permissions) {
+        try {
+            if (permissions.contains("android.permission.MICROG_SPOOF_SIGNATURE")) {
+                if (DEBUG_PACKAGE_INFO) {
+                    Log.v(TAG, "Spoofing signature for microG");
+                }
+                pi.signatures = new Signature[] {new Signature(MICROG_FAKE_SIGNATURE)};
+            }
+        } catch (Throwable t) {
+            // We should never die because of any failures, this is system code!
+            Log.w("PackageManagerService.MICROG_SPOOF_SIGNATURE", t);
+        }
+        return pi;
+    }
+
     public final PackageInfo generatePackageInfo(PackageStateInternal ps,
             @PackageManager.PackageInfoFlagsBits long flags, int userId) {
         if (!mUserManager.exists(userId)) return null;
@@ -1631,14 +1654,26 @@ public class ComputerEngine implements Computer {
             // Compute GIDs only if requested
             final int[] gids = (flags & PackageManager.GET_GIDS) == 0 ? EMPTY_INT_ARRAY
                     : mPermissionManager.getGidsForUid(UserHandle.getUid(userId, ps.getAppId()));
-            // Compute granted permissions only if package has requested permissions
-            final Set<String> permissions = ((flags & PackageManager.GET_PERMISSIONS) == 0
+            // Allow microG GmsCore and FakeStore to spoof signature
+            final boolean isMicroG = ArrayUtils.contains(MICROG_FAKE_SIGNATURE_PACKAGES,
+                p.getPackageName());
+            // Compute granted permissions only if package has requested permissions,
+            // or for microG
+            final Set<String> permissions = (((flags & PackageManager.GET_PERMISSIONS) == 0
+                    && !isMicroG)
                     || ArrayUtils.isEmpty(p.getRequestedPermissions())) ? Collections.emptySet()
                     : mPermissionManager.getGrantedPermissions(ps.getPackageName(), userId);
 
-            PackageInfo packageInfo = PackageInfoUtils.generate(p, gids, flags,
-                    state.getFirstInstallTime(), ps.getLastUpdateTime(), permissions, state, userId,
-                    ps);
+            PackageInfo packageInfo;
+            if (isMicroG) {
+                packageInfo = mayFakeSignature(p, PackageInfoUtils.generate(p, gids, flags,
+                        state.getFirstInstallTime(), ps.getLastUpdateTime(), permissions, state,
+                        userId, ps), permissions);
+            } else {
+                packageInfo = PackageInfoUtils.generate(p, gids, flags,
+                        state.getFirstInstallTime(), ps.getLastUpdateTime(), permissions, state,
+                        userId, ps);
+            }
 
             if (packageInfo == null) {
                 return null;
-- 
2.34.1

